version: '2.4'

x-app: &app
  build:
    context: .
    dockerfile: ./Dockerfile
    args:
      APP_ENV: production
      RUBY_VERSION: '2.6.5'
      PG_MAJOR: '11'
      NODE_MAJOR: '10'
      YARN_VERSION: '1.13.0'
      BUNDLER_VERSION: '2.0.2'
  environment: &env
    NODE_ENV: production
    RAILS_ENV: ${RAILS_ENV:-production}
    SECRET_KEY_BASE: mysecretchangeme
    HOST: "${PULLPREVIEW_URL:-http://localhost:3000}"
    ASSET_HOST: "${PULLPREVIEW_URL:-http://localhost:3000}"
    RAILS_SERVE_STATIC_FILES: "true"
    RAILS_LOG_TO_STDOUT: "true"
    SKIP_SUBDOMAIN_CHECK: "true"

x-backend: &backend
  <<: *app
  env_file: .env.pullpreview
  environment:
    <<: *env
    REDIS_URL: redis://redis:6379/
    DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
    WEB_CONCURRENCY: 2
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

services:
  seeder:
    <<: *backend
    command: bundle exec rake db:migrate db:seed admin_generator
    restart: on-failure

  rails:
    <<: *backend
    command: bundle exec rails server -b 0.0.0.0
    ports:
      - '3000'

  sidekiq:
    <<: *backend
    command: bundle exec sidekiq -C config/sidekiq.yml

  postgres:
    image: postgres:11.1
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5432
    healthcheck:
      test: pg_isready -U postgres -h 127.0.0.1
      interval: 5s

  redis:
    image: redis:3.2-alpine
    volumes:
      - redis:/data
    ports:
      - 6379
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 30

  proxy:
    image: caddy:2-alpine
    command: "caddy reverse-proxy --from '${PULLPREVIEW_URL}' --to rails:3000"
    restart: unless-stopped
    volumes:
      - proxy:/data/caddy
    depends_on:
      - rails
    ports:
      - "443:443"

volumes:
  postgres:
  redis:
  proxy:
